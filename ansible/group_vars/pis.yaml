---
baseline_fstab: |-
  LABEL=writable    /              ext4 discard,errors=remount-ro 0 1
  LABEL=system-boot /boot/firmware vfat defaults                  0 0
  LABEL=data        /data/internal ext4 defaults                  0 2
  LABEL=data-ext    /data/external ext4 auto,nofail,noatime,rw    0 3

# Grow internal data partition to full size of disk
baseline_cloud_init_config: |-
  growpart:
    mode: auto
    devices: ["/data/internal"]
    ignore_growroot_disabled: false
  runcmd:
    - [resize2fs, /dev/sda4]

postgres_ca_key: "{{ lookup('ansible.builtin.unvault', './pki/postgres.pie.boats.key.enc') }}"
postgres_ca_cert: "{{ lookup('ansible.builtin.file', './pki/postgres.pie.boats.pem') }}"

postgres_cert_cn_prefix: "{{ k3s_role }}"
postgres_cert_owner: "{{ 'postgres' if k3s_role == 'server' else 'root' }}"
postgres_cert_group: "{{ 'postgres' if k3s_role == 'server' else 'root' }}"
postgres_cert_additional: "{{ [{ 'cn': 'operator.postgres.pie.boats', 'owner': '10478', 'mode': '0400' }] if k3s_role == 'server' else 'root' }}"

postgres_configure_server: "{{ true if k3s_role == 'server' else false }}"
postgres_server_users:
  - name: kubernetes
    databases: [kubernetes]
    cns:
      - agent.postgres.pie.boats
      - server.postgres.pie.boats
  - name: operator
    databases: [all]
    cns:
      - operator.postgres.pie.boats
postgres_server_bootstrap: >
  CREATE USER kubernetes;
  CREATE DATABASE kubernetes
    OWNER kubernetes;
  
  CREATE USER operator WITH CREATEDB CREATEROLE;
postgres_server_data_directory: '/data/internal/postgres'

k3s_binary_name: 'k3s-arm64'
k3s_datastore_endpoint: 'postgres://kubernetes@localhost/kubernetes?sslmode=verify-ca&sslcert=/etc/postgresql/14/main/certs/client.pem&sslkey=/etc/postgresql/14/main/certs/client.key&sslrootcert=/etc/postgresql/14/main/certs/ca.pem'

k3s_local_storage_path: '/data/internal/k3s'

k3s_cluster_cidr_v4: '10.0.0.0/16'
k3s_cluster_cidr_v6: 'fde6:addd:5088:0::/56'
k3s_service_cidr_v4: '10.1.0.0/16'
k3s_service_cidr_v6: 'fde6:addd:5088:1::/112'

k3s_node_suffix: '.node.pie.boats'

k3s_addons:
  # Install ArgoCD and create an app-of-apps to bootstrap the cluster
  argo.yaml: |-
    apiVersion: v1
    kind: Namespace
    metadata:
      name: argocd
    ---
    apiVersion: helm.cattle.io/v1
    kind: HelmChart
    metadata:
      name: argocd
      namespace: kube-system
    spec:
      repo: https://argoproj.github.io/argo-helm
      chart: argo-cd
      targetNamespace: argocd
      valuesContent: |-
        # Disable dex and notifications: we don't need them, and it's extra memory
        dex:
          enabled: false
        notifications:
          enabled: false
        config:
          params:
            # Trade slower syncs for less memory usage
            "controller.operation.processors": 5
            "controller.status.processors": 10
    ---
    apiVersion: argoproj.io/v1alpha1
    kind: Application
    metadata:
      name: root
      namespace: argocd
      finalizers:
        - resources-finalizer.argocd.argoproj.io
    spec:
      destination:
        namespace: argocd
        name: in-cluster
      project: default
      source:
        path: manifests/root
        repoURL: https://github.com/davejbax/home-pi-cluster.git
        targetRevision: main
      syncPolicy:
        automated:
          prune: true
          selfHeal: true
  # Create Vault credentials so that we can access secrets. Ideally we'd do this
  # with ArgoCD, but there's no good way to do this that avoids the chicken-and-egg
  # problem: if we were to store these secrets in Git, we'd need another secrets
  # operator (or equivalent, e.g. KSOPS), but we'd have to get the key for those
  # somewhere the cluster can access.
  #
  # Arguably the better way to do this would be to have a manual set-up step
  # where we 'kubectl create' the secret ourselves, but I want setting up the
  # cluster to be a *completely* hands-free experience: flash the image, then
  # sit back and sip espresso.
  #
  # This does mean that the image becomes sensitive, but that shouldn't be an
  # issue as long as we have vague physical security.
  vault.yaml: |-
    apiVersion: v1
    kind: Namespace
    metadata:
      name: vault-secrets-operator
    ---
    apiVersion: v1
    kind: Secret
    metadata:
      name: vault-secrets-operator-auth
      namespace: vault-secrets-operator
    stringData:
      clientID: {{ lookup('ansible.builtin.env', 'HCP_CLIENT_ID') }}
      clientSecret: {{ lookup('ansible.builtin.env', 'HCP_CLIENT_SECRET') }}